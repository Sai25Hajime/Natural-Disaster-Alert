/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package my.nda;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author sarah
 */
public class Avalanche_Landslide extends javax.swing.JFrame {

    Connection con;
    PreparedStatement st;
    
    String location, terrain, land_cover, occupation, type, risk;
    String rain_snow_fall;
    
    int flag = 0;
    int err_flag = 0;
/**
     * Creates new form Avalanche_Landslide
     */
    public Avalanche_Landslide() {
        initComponents();
        Connect_SQL();
        Record.setEnabled(false);
    }

    public void Connect_SQL()
    {
      try 
        {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/natural_disaster_alert", "root", "");
        } 
      
      catch (ClassNotFoundException | SQLException ex) 
        {
            Logger.getLogger(Avalanche_Landslide.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Avalanche_Landslide_Title = new javax.swing.JLabel();
        Terrain_Label = new javax.swing.JLabel();
        Land_Cover_Label = new javax.swing.JLabel();
        Rainfall_Label = new javax.swing.JLabel();
        Snowfall_Label = new javax.swing.JLabel();
        Occupation_Label = new javax.swing.JLabel();
        Terrain_Combo = new javax.swing.JComboBox<>();
        Land_Cover_Combo = new javax.swing.JComboBox<>();
        Rainfall_Combo = new javax.swing.JComboBox<>();
        Snowfall_Combo = new javax.swing.JComboBox<>();
        Occupation_Combo = new javax.swing.JComboBox<>();
        Predict = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Occupation_Label1 = new javax.swing.JLabel();
        Location_Field = new javax.swing.JTextField();
        Prediction_Label = new javax.swing.JLabel();
        Type_Of_Disaster_Label = new javax.swing.JLabel();
        Level_Of_Risk_Label = new javax.swing.JLabel();
        Type_Of_Disaster_Field = new javax.swing.JTextField();
        Level_Of_Risk_Field = new javax.swing.JTextField();
        Record = new javax.swing.JButton();
        Go_Back = new javax.swing.JButton();
        Land_Cover_Q = new javax.swing.JButton();
        Update_Q = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 15));
        jPanel1.setPreferredSize(new java.awt.Dimension(750, 650));

        Avalanche_Landslide_Title.setFont(new java.awt.Font("Times New Roman", 3, 30)); // NOI18N
        Avalanche_Landslide_Title.setForeground(new java.awt.Color(0, 0, 139));
        Avalanche_Landslide_Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Avalanche_Landslide_Title.setText("Avalanche/ Landslide");

        Terrain_Label.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        Terrain_Label.setForeground(new java.awt.Color(0, 0, 139));
        Terrain_Label.setText("Terrain: ");

        Land_Cover_Label.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        Land_Cover_Label.setForeground(new java.awt.Color(0, 0, 139));
        Land_Cover_Label.setText("Land Cover:");

        Rainfall_Label.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        Rainfall_Label.setForeground(new java.awt.Color(0, 0, 139));
        Rainfall_Label.setText("Rainfall:");

        Snowfall_Label.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        Snowfall_Label.setForeground(new java.awt.Color(0, 0, 139));
        Snowfall_Label.setText("Snowfall:");

        Occupation_Label.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        Occupation_Label.setForeground(new java.awt.Color(0, 0, 139));
        Occupation_Label.setText("Occupation ongoing in the area: ");

        Terrain_Combo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Terrain_Combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "....", "Flat", "Gentle slope", "Steep slope" }));
        Terrain_Combo.setToolTipText("");
        Terrain_Combo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Terrain_Combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Terrain_ComboActionPerformed(evt);
            }
        });

        Land_Cover_Combo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Land_Cover_Combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "....", "Forested Land (without snow cover)", "Forested Land (with snow cover)", "Deforested Land (without snow cover)", "Deforested Land (with snow cover)" }));
        Land_Cover_Combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Land_Cover_ComboActionPerformed(evt);
            }
        });

        Rainfall_Combo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Rainfall_Combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "....", "Light to none", "Moderate", "Heavy", "Very heavy" }));
        Rainfall_Combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Rainfall_ComboActionPerformed(evt);
            }
        });

        Snowfall_Combo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Snowfall_Combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "....", "Light to none", "Moderate", "Heavy", "Very heavy" }));
        Snowfall_Combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Snowfall_ComboActionPerformed(evt);
            }
        });

        Occupation_Combo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Occupation_Combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "....", "Yes", "No" }));
        Occupation_Combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Occupation_ComboActionPerformed(evt);
            }
        });

        Predict.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        Predict.setText("Predict");
        Predict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PredictActionPerformed(evt);
            }
        });

        Reset.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        Reset.setText("Reset");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        Update.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Occupation_Label1.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        Occupation_Label1.setForeground(new java.awt.Color(0, 0, 139));
        Occupation_Label1.setText("Location:");

        Location_Field.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Location_Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Location_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Location_FieldActionPerformed(evt);
            }
        });

        Prediction_Label.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        Prediction_Label.setForeground(new java.awt.Color(51, 51, 51));
        Prediction_Label.setText("Prediction: ");

        Type_Of_Disaster_Label.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        Type_Of_Disaster_Label.setForeground(new java.awt.Color(51, 51, 51));
        Type_Of_Disaster_Label.setText("Type of Disaster: ");

        Level_Of_Risk_Label.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        Level_Of_Risk_Label.setForeground(new java.awt.Color(51, 51, 51));
        Level_Of_Risk_Label.setText("Level of Risk:");

        Type_Of_Disaster_Field.setEditable(false);
        Type_Of_Disaster_Field.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Type_Of_Disaster_Field.setForeground(new java.awt.Color(204, 0, 0));
        Type_Of_Disaster_Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Type_Of_Disaster_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Type_Of_Disaster_FieldActionPerformed(evt);
            }
        });

        Level_Of_Risk_Field.setEditable(false);
        Level_Of_Risk_Field.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Level_Of_Risk_Field.setForeground(new java.awt.Color(204, 0, 0));
        Level_Of_Risk_Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Level_Of_Risk_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Level_Of_Risk_FieldActionPerformed(evt);
            }
        });

        Record.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        Record.setText("Record");
        Record.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecordActionPerformed(evt);
            }
        });

        Go_Back.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        Go_Back.setText("Go Back");
        Go_Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Go_BackActionPerformed(evt);
            }
        });

        Land_Cover_Q.setBackground(new java.awt.Color(102, 102, 102));
        Land_Cover_Q.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Land_Cover_Q.setForeground(new java.awt.Color(255, 255, 255));
        Land_Cover_Q.setText("?");
        Land_Cover_Q.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Land_Cover_Q.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Land_Cover_QActionPerformed(evt);
            }
        });

        Update_Q.setBackground(new java.awt.Color(102, 102, 102));
        Update_Q.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Update_Q.setForeground(new java.awt.Color(255, 255, 255));
        Update_Q.setText("?");
        Update_Q.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Update_Q.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Update_QActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 193, Short.MAX_VALUE)
                .addComponent(Avalanche_Landslide_Title, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(179, 179, 179))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Land_Cover_Label)
                        .addGap(18, 18, 18)
                        .addComponent(Land_Cover_Combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Land_Cover_Q, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Occupation_Label1)
                            .addComponent(Terrain_Label))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Location_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Terrain_Combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(Rainfall_Label)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Rainfall_Combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(Snowfall_Label)
                            .addGap(18, 18, 18)
                            .addComponent(Snowfall_Combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Occupation_Label)
                        .addGap(18, 18, 18)
                        .addComponent(Occupation_Combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Prediction_Label)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Type_Of_Disaster_Label)
                            .addComponent(Level_Of_Risk_Label))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Level_Of_Risk_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Type_Of_Disaster_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Predict)
                                .addGap(18, 18, 18)
                                .addComponent(Update)
                                .addGap(18, 18, 18)
                                .addComponent(Update_Q, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Record)
                                .addGap(18, 18, 18)
                                .addComponent(Reset)
                                .addGap(18, 18, 18)
                                .addComponent(Go_Back)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(Avalanche_Landslide_Title, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Occupation_Label1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Location_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Terrain_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Terrain_Combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Land_Cover_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Land_Cover_Combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Land_Cover_Q))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Rainfall_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Rainfall_Combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Snowfall_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Snowfall_Combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Occupation_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Occupation_Combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Predict)
                    .addComponent(Update)
                    .addComponent(Update_Q))
                .addGap(18, 18, 18)
                .addComponent(Prediction_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Type_Of_Disaster_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Type_Of_Disaster_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Level_Of_Risk_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Level_Of_Risk_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Record)
                    .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Go_Back))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Terrain_ComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Terrain_ComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Terrain_ComboActionPerformed

    private void Land_Cover_ComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Land_Cover_ComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Land_Cover_ComboActionPerformed

    private void Rainfall_ComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Rainfall_ComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Rainfall_ComboActionPerformed

    private void Snowfall_ComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Snowfall_ComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Snowfall_ComboActionPerformed

    private void Occupation_ComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Occupation_ComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Occupation_ComboActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
    Rainfall_Combo.setEnabled(true);
    Snowfall_Combo.setEnabled(true);
    Terrain_Combo.setEnabled(true);
    Land_Cover_Combo.setEnabled(true);
    Occupation_Combo.setEnabled(true);
    Location_Field.setEnabled(true);
    
    Terrain_Combo.setSelectedIndex(0);
    Land_Cover_Combo.setSelectedIndex(0);
    Rainfall_Combo.setSelectedIndex(0);
    Snowfall_Combo.setSelectedIndex(0);
    Occupation_Combo.setSelectedIndex(0);
    
    Location_Field.setText("");
    Type_Of_Disaster_Field.setText("");
    Level_Of_Risk_Field.setText("");
    // TODO add your handling code here:
    }//GEN-LAST:event_ResetActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
    if (Land_Cover_Combo.getSelectedItem() == "Forested Land (without snow cover)" || Land_Cover_Combo.getSelectedItem() == "Deforested Land (without snow cover)") 
    {
    Snowfall_Combo.setSelectedIndex(0);
    Snowfall_Combo.setEnabled(false);
    Rainfall_Combo.setEnabled(true);
    }

    if (Land_Cover_Combo.getSelectedItem() == "Forested Land (with snow cover)" || Land_Cover_Combo.getSelectedItem() == "Deforested Land (with snow cover)")
    {
    Rainfall_Combo.setSelectedIndex(0);
    Rainfall_Combo.setEnabled(false);
    Snowfall_Combo.setEnabled(true);
    }
    // TODO add your handling code here:
    }//GEN-LAST:event_UpdateActionPerformed

    private void PredictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PredictActionPerformed
    switch (Terrain_Combo.getSelectedIndex())
    {
        case 1:
        {
            break;
        }
        
        case 2:
        {
            flag+=1;
            break;
        }
        
        case 3:
        {
            flag+=2;
            break;
        }
        
        default:
        {
            JOptionPane.showMessageDialog(this, "Invalid Terrain");
            err_flag = 1;
        }
    }
    
    switch (Land_Cover_Combo.getSelectedIndex())
    {
        case 1:
        {
            flag-=1;
            break;
        }
        
        case 2:
        {
            flag-=1;
            break;
        }
        
        case 3:
        {
            flag+=2;
            break;
        }
        
        case 4:
        {
            flag+=2;
            break;
        }
        
        default:
        {
            JOptionPane.showMessageDialog(this, "Invalid Land Cover");
            err_flag = 1;
        }
    }
    
    if ((Rainfall_Combo.isEnabled() == true && Snowfall_Combo.isEnabled() == false) || (Rainfall_Combo.isEnabled() == false && Snowfall_Combo.isEnabled() == true))
    {
        if (Rainfall_Combo.isEnabled() == true)
        {
        switch (Rainfall_Combo.getSelectedIndex())
        {
            case 1:
            {
                break;
            }
            
            case 2:
            {
                flag+=1;
                break;
            }
            
            case 3:
            {
                flag+=2;
                break;
            }
            
            case 4:
            {
                flag+=3;
                break;
            }
            
            default:
            {
                JOptionPane.showMessageDialog(this, "Invalid Rainfall");
                err_flag = 1;
            }
        }
        }   
        
        if (Snowfall_Combo.isEnabled() == true)
        {
        switch (Snowfall_Combo.getSelectedIndex())
        {
            case 1:
            {
                break;
            }
            
            case 2:
            {
                flag+=1;
                break;
            }
            
            case 3:
            {
                flag+=2;
                break;
            }
            
            case 4:
            {
                flag+=3;
                break;
            }
            
            default:
            {
                JOptionPane.showMessageDialog(this, "Invalid Snowfall");
                err_flag = 1;
            }
        }
        }
    }
    
    else
    {
        JOptionPane.showMessageDialog(this, "Rainfall and snowfall parameters can't be used at the same timefor prediction. Press Update button for clarification.");
        err_flag = 1;
    }
    
    if (Occupation_Combo.isEnabled() == true)
    {
        switch (Occupation_Combo.getSelectedIndex())
        {
        case 1:
        {
            flag+=2;
            break;
        }
        
        case 2:
        {
            break;
        }
        
        default:
        {
            JOptionPane.showMessageDialog(this, "Invalid Option");
            err_flag = 1;
        }
        }
    }

    if (err_flag == 0)
    {
    if (Land_Cover_Combo.getSelectedIndex() == 1 || Land_Cover_Combo.getSelectedIndex() == 3)
    {
    Type_Of_Disaster_Field.setText("LANDSLIDE");
    }

    else if (Land_Cover_Combo.getSelectedIndex() == 2 || Land_Cover_Combo.getSelectedIndex() == 4)
    {
    Type_Of_Disaster_Field.setText("AVALANCHE");
    }

    if ((flag>=0 || flag<0) && flag <=3)
    {
    Level_Of_Risk_Field.setText("LOW-RISK");
    }

    else if (flag>3)
    {
    Level_Of_Risk_Field.setText("HIGH-RISK");
    }
    
    Terrain_Combo.setEnabled(false);
    Land_Cover_Combo.setEnabled(false);
    Rainfall_Combo.setEnabled(false);
    Snowfall_Combo.setEnabled(false);
    Occupation_Combo.setEnabled(false);
    Location_Field.setEnabled(false);
    Record.setEnabled(true);
    }

    else if (err_flag == 1)
    {
    JOptionPane.showMessageDialog(this, "Error in one or more fields. Please clarify the error in the required fields.");
    Type_Of_Disaster_Field.setText("ERROR");
    Level_Of_Risk_Field.setText("ERROR");
    err_flag = 0;
    }// TODO add your handling code here:
    }//GEN-LAST:event_PredictActionPerformed

    private void Location_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Location_FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Location_FieldActionPerformed

    private void Type_Of_Disaster_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Type_Of_Disaster_FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Type_Of_Disaster_FieldActionPerformed

    private void Level_Of_Risk_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Level_Of_Risk_FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Level_Of_Risk_FieldActionPerformed

    private void RecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecordActionPerformed

    location = Location_Field.getText();
    terrain = Terrain_Combo.getSelectedItem().toString();
    land_cover = Land_Cover_Combo.getSelectedItem().toString();
    
    if (Snowfall_Combo.getSelectedIndex() == 0)
    {
    rain_snow_fall = Rainfall_Combo.getSelectedItem().toString();
    }

    else if (Rainfall_Combo.getSelectedIndex() == 0)
    {
    rain_snow_fall = Snowfall_Combo.getSelectedItem().toString();
    }          
            
    occupation = Occupation_Combo.getSelectedItem().toString();
    type = Type_Of_Disaster_Field.getText();
    risk = Level_Of_Risk_Field.getText();
    
    try
        {
        // Add sql query
        st = con.prepareStatement("insert into avalanche_landslide(Location, Terrain, Land_Cover, Rainfall_Snowfall, Ongoing_Occupation_Confirmation, Type_of_Disaster, Level_of_Risk) values (?, ?, ?, ?, ?, ?, ?)");
        st.setString(1, location);
        st.setString(2, terrain);
        st.setString(3, land_cover);
        st.setString(4, rain_snow_fall);
        st.setString(5, occupation);
        st.setString(6, type);
        st.setString(7, risk);

        int e = st.executeUpdate();

        if(e == 1)
        {
            JOptionPane.showMessageDialog(this, "Disaster Prediction Record Added");
            Rainfall_Combo.setEnabled(true);
            Snowfall_Combo.setEnabled(true);
            Terrain_Combo.setEnabled(true);
            Land_Cover_Combo.setEnabled(true);
            Occupation_Combo.setEnabled(true);
            Location_Field.setEnabled(true);
            Record.setEnabled(false);
    
            Terrain_Combo.setSelectedIndex(0);
            Land_Cover_Combo.setSelectedIndex(0);
            Rainfall_Combo.setSelectedIndex(0);
            Snowfall_Combo.setSelectedIndex(0);
            Occupation_Combo.setSelectedIndex(0);
    
            Location_Field.setText("");
            Type_Of_Disaster_Field.setText("");
            Level_Of_Risk_Field.setText("");
        }

        else
        {
            JOptionPane.showMessageDialog(this, "Disaster Prediction Record Not Added");
        }

        }

        catch (SQLException ex)
        {
        Logger.getLogger(Avalanche_Landslide.class.getName()).log(Level.SEVERE, null, ex);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_RecordActionPerformed

    private void Go_BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Go_BackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Go_BackActionPerformed

    private void Land_Cover_QActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Land_Cover_QActionPerformed
    JOptionPane.showMessageDialog(this, "Land Cover is used to determine the usage of either rainfall or snowfall for prediction. It is necessary to press the 'Upload' button for this purpose, once the land cover is selected.");    // TODO add your handling code here:
    }//GEN-LAST:event_Land_Cover_QActionPerformed

    private void Update_QActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Update_QActionPerformed
    JOptionPane.showMessageDialog(this, "Update button is used to lock either rainfall or snowfall option box, depending on the land cover selected.");    
    // TODO add your handling code here:
    }//GEN-LAST:event_Update_QActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Avalanche_Landslide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Avalanche_Landslide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Avalanche_Landslide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Avalanche_Landslide.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Avalanche_Landslide().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Avalanche_Landslide_Title;
    private javax.swing.JButton Go_Back;
    private javax.swing.JComboBox<String> Land_Cover_Combo;
    private javax.swing.JLabel Land_Cover_Label;
    private javax.swing.JButton Land_Cover_Q;
    private javax.swing.JTextField Level_Of_Risk_Field;
    private javax.swing.JLabel Level_Of_Risk_Label;
    private javax.swing.JTextField Location_Field;
    private javax.swing.JComboBox<String> Occupation_Combo;
    private javax.swing.JLabel Occupation_Label;
    private javax.swing.JLabel Occupation_Label1;
    private javax.swing.JButton Predict;
    private javax.swing.JLabel Prediction_Label;
    private javax.swing.JComboBox<String> Rainfall_Combo;
    private javax.swing.JLabel Rainfall_Label;
    private javax.swing.JButton Record;
    private javax.swing.JButton Reset;
    private javax.swing.JComboBox<String> Snowfall_Combo;
    private javax.swing.JLabel Snowfall_Label;
    private javax.swing.JComboBox<String> Terrain_Combo;
    private javax.swing.JLabel Terrain_Label;
    private javax.swing.JTextField Type_Of_Disaster_Field;
    private javax.swing.JLabel Type_Of_Disaster_Label;
    private javax.swing.JButton Update;
    private javax.swing.JButton Update_Q;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
